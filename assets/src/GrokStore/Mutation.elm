-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GrokStore.Mutation exposing (AddItemOptionalArguments, AddItemRequiredArguments, CheckItemRequiredArguments, CreateListRequiredArguments, CreateUserRequiredArguments, LoginRequiredArguments, addItem, checkItem, createList, createUser, login)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import GrokStore.InputObject
import GrokStore.Interface
import GrokStore.Object
import GrokStore.Scalar
import GrokStore.ScalarCodecs
import GrokStore.Union
import Json.Decode as Decode exposing (Decoder)


type alias AddItemOptionalArguments =
    { listId : OptionalArgument GrokStore.ScalarCodecs.Id
    , price : OptionalArgument Float
    , quantity : OptionalArgument Float
    }


type alias AddItemRequiredArguments =
    { text : String }


{-| Adds an item to the list
-}
addItem : (AddItemOptionalArguments -> AddItemOptionalArguments) -> AddItemRequiredArguments -> SelectionSet decodesTo GrokStore.Object.Item -> SelectionSet (Maybe decodesTo) RootMutation
addItem fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { listId = Absent, price = Absent, quantity = Absent }

        optionalArgs =
            [ Argument.optional "listId" filledInOptionals.listId (GrokStore.ScalarCodecs.codecs |> GrokStore.Scalar.unwrapEncoder .codecId), Argument.optional "price" filledInOptionals.price Encode.float, Argument.optional "quantity" filledInOptionals.quantity Encode.float ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "addItem" (optionalArgs ++ [ Argument.required "text" requiredArgs.text Encode.string ]) object_ (identity >> Decode.nullable)


type alias CheckItemRequiredArguments =
    { id : GrokStore.ScalarCodecs.Id }


{-| Toggles the checked status on an item
-}
checkItem : CheckItemRequiredArguments -> SelectionSet decodesTo GrokStore.Object.Item -> SelectionSet (Maybe decodesTo) RootMutation
checkItem requiredArgs object_ =
    Object.selectionForCompositeField "checkItem" [ Argument.required "id" requiredArgs.id (GrokStore.ScalarCodecs.codecs |> GrokStore.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CreateListRequiredArguments =
    { title : String }


{-| Create a list for the signed in user. Will error if there is not user signed in
-}
createList : CreateListRequiredArguments -> SelectionSet decodesTo GrokStore.Object.List -> SelectionSet (Maybe decodesTo) RootMutation
createList requiredArgs object_ =
    Object.selectionForCompositeField "createList" [ Argument.required "title" requiredArgs.title Encode.string ] object_ (identity >> Decode.nullable)


type alias CreateUserRequiredArguments =
    { email : String
    , name : String
    , password : String
    }


{-| Register a user
-}
createUser : CreateUserRequiredArguments -> SelectionSet decodesTo GrokStore.Object.User -> SelectionSet (Maybe decodesTo) RootMutation
createUser requiredArgs object_ =
    Object.selectionForCompositeField "createUser" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "name" requiredArgs.name Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object_ (identity >> Decode.nullable)


type alias LoginRequiredArguments =
    { email : String
    , password : String
    }


{-| Sign in a user
-}
login : LoginRequiredArguments -> SelectionSet decodesTo GrokStore.Object.Session -> SelectionSet (Maybe decodesTo) RootMutation
login requiredArgs object_ =
    Object.selectionForCompositeField "login" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object_ (identity >> Decode.nullable)
