-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GrokStore.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import GrokStore.InputObject
import GrokStore.Interface
import GrokStore.Object
import GrokStore.Scalar
import GrokStore.ScalarCodecs
import GrokStore.Union
import Json.Decode as Decode exposing (Decoder)


{-| Get all lists
-}
grokLists : SelectionSet decodesTo GrokStore.Object.GrokList -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
grokLists object_ =
    Object.selectionForCompositeField "grokLists" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias UserRequiredArguments =
    { id : GrokStore.ScalarCodecs.Id }


{-| Get a user by id
-}
user : UserRequiredArguments -> SelectionSet decodesTo GrokStore.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id (GrokStore.ScalarCodecs.codecs |> GrokStore.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
